# Демонстрация функциональных методов в DataCode
# Этот пример показывает использование map(), filter(), и reduce()

print("=== Демонстрация функциональных методов DataCode ===")
print("")

# Создаем тестовые данные
global numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("Исходный массив:", numbers)
print("")

# === MAP - Преобразование каждого элемента ===
print("1. MAP - Преобразование элементов")
print("----------------------------------")

# Применяем функцию abs к каждому элементу (для демонстрации)
global negative_numbers = [-5, -3, 0, 2, -8, 4]
print("Отрицательные числа:", negative_numbers)

global absolute_values = map(negative_numbers, "abs")
print("После применения abs():", absolute_values)
print("")

# === FILTER - Фильтрация элементов ===
print("2. FILTER - Фильтрация элементов")
print("---------------------------------")

# Фильтруем положительные числа (используем abs как предикат)
global mixed_numbers = [-2, -1, 0, 1, 2, 3, 4, 5]
print("Смешанные числа:", mixed_numbers)

global filtered_numbers = filter(mixed_numbers, "abs")
print("После фильтрации (abs возвращает truthy для ненулевых):", filtered_numbers)
print("")

# === REDUCE - Свертка массива ===
print("3. REDUCE - Свертка массива")
print("---------------------------")

# Находим максимальное значение
global test_numbers = [3, 7, 2, 9, 1, 8, 4]
print("Тестовые числа:", test_numbers)

global maximum = reduce(test_numbers, "max")
print("Максимальное значение:", maximum)

# Reduce с начальным значением
global maximum_with_initial = reduce(test_numbers, "max", 15)
print("Максимальное с начальным значением 15:", maximum_with_initial)
print("")

# === КОМБИНИРОВАНИЕ МЕТОДОВ ===
print("4. Комбинирование функциональных методов")
print("---------------------------------------")

# Пример цепочки операций
global source_data = [-10, -5, 0, 3, 7, -2, 8, 12]
print("Исходные данные:", source_data)

# Шаг 1: Применяем abs ко всем элементам
global step1 = map(source_data, "abs")
print("Шаг 1 - Применили abs():", step1)

# Шаг 2: Фильтруем (оставляем все, так как abs всегда положительный)
global step2 = filter(step1, "abs")
print("Шаг 2 - Отфильтровали:", step2)

# Шаг 3: Находим максимум
global final_result = reduce(step2, "max")
print("Шаг 3 - Максимум:", final_result)
print("")

# === РАБОТА С ПУСТЫМИ МАССИВАМИ ===
print("5. Работа с пустыми массивами")
print("-----------------------------")

global empty_array = []
print("Пустой массив:", empty_array)

global empty_map = map(empty_array, "abs")
print("Map пустого массива:", empty_map)

global empty_filter = filter(empty_array, "abs")
print("Filter пустого массива:", empty_filter)

# Reduce пустого массива с начальным значением
global empty_reduce = reduce(empty_array, "max", 42)
print("Reduce пустого массива с начальным значением:", empty_reduce)
print("")

# === ПРАКТИЧЕСКИЙ ПРИМЕР ===
print("6. Практический пример - обработка данных")
print("----------------------------------------")

# Имитируем обработку данных о продажах
global sales_data = [100, 250, 0, 180, 320, 0, 90, 400]
print("Данные о продажах:", sales_data)

# Убираем нулевые продажи (filter)
global non_zero_sales = filter(sales_data, "abs")
print("Ненулевые продажи:", non_zero_sales)

# Находим максимальную продажу
global max_sale = reduce(non_zero_sales, "max")
print("Максимальная продажа:", max_sale)
print("")

print("=== Демонстрация завершена ===")
print("")
print("Функциональные методы DataCode:")
print("• map(array, function_name) - применяет функцию к каждому элементу")
print("• filter(array, function_name) - фильтрует элементы по предикату")
print("• reduce(array, function_name) - сворачивает массив в одно значение")
print("• reduce(array, function_name, initial) - с начальным значением")
print("")
print("Поддерживаются встроенные функции: abs, max, min и другие")
print("Пользовательские функции будут поддержаны в следующих версиях")
