# Large Dataset Processing Performance Test
# This test creates and processes a large dataset to identify bottlenecks

print("=== LARGE DATASET PROCESSING PERFORMANCE TEST ===")
print("Creating large dataset with 10,000 rows...")

# Create large dataset
global large_data = []
global headers = ['id', 'employee_name', 'department', 'salary', 'age', 'performance_score', 'hire_date', 'location']

# Generate 10,000 rows of realistic employee data
for i in range(10000) do
    global dept_id = i - (i / 15) * 15
    global salary_mod = i - (i / 75000) * 75000
    global age_mod = i - (i / 43) * 43
    global perf_mod = i - (i / 100) * 100
    global date_mod = i - (i / 28) * 28
    global loc_mod = i - (i / 8) * 8

    global row = [
        i,
        'Employee_' + i,
        'Department_' + dept_id,
        45000 + salary_mod,
        22 + age_mod,
        perf_mod / 100.0,
        '2020-01-' + (date_mod + 1),
        'Location_' + loc_mod
    ]
    global large_data = push(large_data, row)
forend

print("Dataset created. Creating table...")
global employees = table_create(large_data, headers)
print("Table created successfully!")

# Test 1: Column access performance
print("Testing column access performance...")
global names = employees['employee_name']
global salaries = employees['salary']
global departments = employees['department']
global ages = employees['age']
print("Column access completed.")

# Test 2: Table slicing operations
print("Testing table slicing operations...")
global first_1000 = table_head(employees, 1000)
global last_500 = table_tail(employees, 500)
print("Table slicing completed.")

# Test 3: Data analysis operations
print("Testing data analysis operations...")
global salary_sum = sum(salaries)
global avg_age = average(ages)
global unique_departments = unique(departments)
print("Data analysis completed.")

# Test 4: Complex data processing
print("Testing complex data processing...")
global high_performers = []
global performance_scores = employees['performance_score']
global employee_names = employees['employee_name']
for i in range(len(performance_scores)) do
    if performance_scores[i] > 0.8 do
        global high_performers = push(high_performers, employee_names[i])
    endif
forend

print("Complex processing completed.")

# Results summary
print("=== PERFORMANCE TEST RESULTS ===")
print("Total employees processed:", len(employees['id']))
print("Total salary sum:", salary_sum)
print("Average age:", avg_age)
print("Unique departments:", len(unique_departments))
print("High performers count:", len(high_performers))

print("Large dataset performance test completed successfully!")
