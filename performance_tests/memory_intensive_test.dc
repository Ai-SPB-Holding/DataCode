# Memory-Intensive Operations Performance Test
# Tests memory allocation patterns and garbage collection behavior

print("=== MEMORY-INTENSIVE OPERATIONS PERFORMANCE TEST ===")

# Test 1: Large array creation and manipulation
print("Test 1: Large array operations...")
global large_arrays = []
global total_elements = 0

for i in range(100) do
    global current_array = []
    for j in range(500) do
        global current_array = push(current_array, i * 500 + j)
        global total_elements = total_elements + 1
    forend
    global large_arrays = push(large_arrays, current_array)
forend

print("Created", len(large_arrays), "arrays with", total_elements, "total elements")

# Test 2: Memory-intensive string operations
print("Test 2: String concatenation stress test...")
global large_string = ""
global string_parts = []

for i in range(1000) do
    global part = "DataCode_Performance_Test_String_Part_" + i + "_"
    global string_parts = push(string_parts, part)
    global large_string = large_string + part
forend

print("String operations completed. Final string length:", len(large_string))

# Test 3: Nested data structures
print("Test 3: Nested data structures...")
global nested_structure = []

for i in range(50) do
    global level1 = []
    for j in range(50) do
        global level2 = []
        for k in range(20) do
            global level2 = push(level2, [i, j, k, i*j*k])
        forend
        global level1 = push(level1, level2)
    forend
    global nested_structure = push(nested_structure, level1)
forend

print("Nested structure created with dimensions: 50x50x20")

# Test 4: Table operations with large datasets
print("Test 4: Multiple table operations...")
global table_data = []
global table_headers = ['id', 'data1', 'data2', 'data3', 'data4', 'data5']

for i in range(2000) do
    global row = [i, i*2, i*3, i*4, i*5, i*6]
    global table_data = push(table_data, row)
forend

global performance_table = table_create(table_data, table_headers)

# Multiple table views to test memory sharing
global view1 = performance_table['data1']
global view2 = performance_table['data2']
global view3 = performance_table['data3']
global view4 = performance_table['data4']
global view5 = performance_table['data5']

print("Table operations completed with", len(table_data), "rows")

# Test 5: Memory cleanup simulation
print("Test 5: Variable reassignment patterns...")
for i in range(100) do
    global temp_array = []
    for j in range(100) do
        global temp_array = push(temp_array, j)
    forend
    # Reassign to simulate memory cleanup
    global temp_array = []
forend

print("Memory cleanup simulation completed")

# Results
print("=== MEMORY TEST RESULTS ===")
print("Large arrays count:", len(large_arrays))
print("String parts count:", len(string_parts))
print("Nested structure depth: 3 levels")
print("Performance table rows:", len(performance_table['id']))
print("Memory-intensive test completed successfully!")
