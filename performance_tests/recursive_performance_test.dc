# Recursive Function Performance Test
# Tests recursive function call performance and stack management

print("=== RECURSIVE FUNCTION PERFORMANCE TEST ===")

# Test 1: Factorial function (linear recursion)
print("Test 1: Factorial function performance...")

global function factorial(n) do
    if n <= 1 do
        return 1
    endif
    return n * factorial(n - 1)
endfunction

global fact_results = []
for i in range(1, 16) do
    global result = factorial(i)
    global fact_results = push(fact_results, result)
    print("factorial(" + i + ") =", result)
forend

# Test 2: Fibonacci function (exponential recursion)
print("Test 2: Fibonacci function performance...")

global function fibonacci(n) do
    if n <= 1 do
        return n
    endif
    return fibonacci(n - 1) + fibonacci(n - 2)
endfunction

global fib_results = []
for i in range(1, 21) do
    global result = fibonacci(i)
    global fib_results = push(fib_results, result)
    print("fibonacci(" + i + ") =", result)
forend

# Test 3: Ackermann function (highly recursive)
print("Test 3: Ackermann function performance (limited values)...")

global function ackermann(m, n) do
    if m == 0 do
        return n + 1
    endif
    if n == 0 do
        return ackermann(m - 1, 1)
    endif
    return ackermann(m - 1, ackermann(m, n - 1))
endfunction

global ack_results = []
for m in range(0, 4) do
    for n in range(0, 4) do
        global result = ackermann(m, n)
        global ack_results = push(ack_results, result)
        print("ackermann(" + m + ", " + n + ") =", result)
    forend
forend

# Test 4: Mutual recursion
print("Test 4: Mutual recursion performance...")

global function is_even(n) do
    if n == 0 do
        return true
    endif
    return is_odd(n - 1)
endfunction

global function is_odd(n) do
    if n == 0 do
        return false
    endif
    return is_even(n - 1)
endfunction

global mutual_results = []
for i in range(0, 21) do
    global even_result = is_even(i)
    global odd_result = is_odd(i)
    global mutual_results = push(mutual_results, [i, even_result, odd_result])
    print(i, "is even:", even_result, "is odd:", odd_result)
forend

# Test 5: Tree traversal simulation
print("Test 5: Tree traversal recursion...")

global function tree_sum(depth, value) do
    if depth <= 0 do
        return value
    endif
    global left = tree_sum(depth - 1, value * 2)
    global right = tree_sum(depth - 1, value * 2 + 1)
    return left + right
endfunction

global tree_results = []
for depth in range(1, 8) do
    global result = tree_sum(depth, 1)
    global tree_results = push(tree_results, result)
    print("tree_sum(depth=" + depth + ") =", result)
forend

# Results summary
print("=== RECURSIVE PERFORMANCE RESULTS ===")
print("Factorial tests completed:", len(fact_results))
print("Fibonacci tests completed:", len(fib_results))
print("Ackermann tests completed:", len(ack_results))
print("Mutual recursion tests completed:", len(mutual_results))
print("Tree traversal tests completed:", len(tree_results))
print("All recursive performance tests completed successfully!")
